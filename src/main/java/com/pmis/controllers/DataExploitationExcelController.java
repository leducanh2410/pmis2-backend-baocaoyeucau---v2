package com.pmis.controllers;

import com.pmis.constant.Constant;
import com.pmis.models.entity.Dashboard;
import com.pmis.payload.response.service.ExecServiceResponse;
import com.pmis.payload.response.service.KhaiThacDuLieuDataExcelResponse;
import com.pmis.services.service.DashboardService;
import com.pmis.services.service.DataExploitationExcelService;
import com.pmis.services.service.DataExploitationService;
import com.pmis.services.service.data_exploitation.KhaiThacDuLieuExcelService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/excel")
@PreAuthorize("isAuthenticated()")
public class DataExploitationExcelController {
    @Autowired
    private KhaiThacDuLieuExcelService khaiThacDuLieuExcelService;

    @Autowired
    private DataExploitationService dataExploitationService;

    @Autowired
    private DataExploitationExcelService dataExploitationExcelService;

    @Autowired
    private DashboardService dashboardService;

    @GetMapping("/{maDuLieu}")
    public ResponseEntity<Object> getExcelBin(@PathVariable String maDuLieu) {
        return findExcelBinByMaDuLieu(maDuLieu);
    }

    @GetMapping("/dashboard")
    public ResponseEntity<Object> getExcelBinOfDashboardChart(
            @RequestParam String dashboardId,
            @RequestParam String frame,
            @RequestParam Integer position
    ) {
        Dashboard dashboard = dashboardService.findById(dashboardId);
        if (dashboard == null) {
            return ResponseEntity.ok(new ExecServiceResponse(null, 0, "Không tìm thấy thông tin dashboard"));
        }
        List<String> frames = new ArrayList<>();
        if (dashboard.getPosition() != null && !dashboard.getPosition().isEmpty()) {
            frames = Arrays.stream(dashboard.getPosition().split(";")).toList();
        }
        int f1Index = -1;
        int f2Index = -1;
        int f3Index = -1;
        int index = 0;
        for (String e: frames) {
            if (e.equals("F1") && f1Index < 0) {
                f1Index = index;
            } else if (e.equals("F2") && f2Index < 0) {
                f2Index = index;
            } else if (e.equals("F3") && f3Index < 0) {
                f3Index = index;
            }
            index++;
        }

        int chartIndex = -1;
        chartIndex= switch (frame) {
            case "F1" -> f1Index + position;
            case "F2" -> f2Index + position;
            case "F3" -> f3Index + position;
            default -> chartIndex;
        };
        if (chartIndex < 0) {
            return ResponseEntity.ok(new ExecServiceResponse(null, 0, "Không tìm thấy thông tin dữ liệu đã khai thác của biểu đồ"));
        }
        List<String> charts = new ArrayList<>();
        if (dashboard.getCharts() != null) {
            charts = Arrays.stream(dashboard.getCharts().split(";")).toList();
        }

        if (charts.size() <= chartIndex) {
            return ResponseEntity.ok(new ExecServiceResponse(null, 0, "Không tìm thấy thông tin dữ liệu đã khai thác của biểu đồ"));
        }

        String maDuLieu;
        try {
            maDuLieu = dashboardService.findMaDuLieuByChartId(charts.get(chartIndex));
            return findExcelBinByMaDuLieu(maDuLieu);
        } catch (Exception e) {
            return ResponseEntity.ok(new ExecServiceResponse(null, 0, "Không tìm thấy thông tin dữ liệu đã khai thác của biểu đồ"));
        }
    }

    private ResponseEntity<Object> findExcelBinByMaDuLieu(String maDuLieu) {
        dataExploitationService.getDataExploitation(maDuLieu, true, true);
        if (dataExploitationService.getRowsNum() >= Constant.MAX_EXCEL_ROWS) {
            return ResponseEntity.ok(new ExecServiceResponse(null, 0, "Số lượng bản ghi dữ liệu quá lớn, hệ thống không thể xuất excel."));
        }
        Object base64Data = khaiThacDuLieuExcelService.ResultSetToExcel(
                dataExploitationService.getDataResultSet(maDuLieu),
                dataExploitationService.getTableName(),
                dataExploitationExcelService.getCotDuLieu(maDuLieu, dataExploitationService.getTableId())
        );
        return ResponseEntity.ok(new KhaiThacDuLieuDataExcelResponse(
                base64Data, dataExploitationService.getTableName() + (new Date()).getTime() + ".xlsx" , 1, ""
        ));
    }
}
