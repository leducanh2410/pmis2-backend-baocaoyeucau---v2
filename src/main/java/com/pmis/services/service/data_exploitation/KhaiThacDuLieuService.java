package com.pmis.services.service.data_exploitation;

import com.pmis.models.model.Api_Service_Input;
import com.pmis.payload.request.ExecServiceRequest;
import com.pmis.payload.response.service.KhaiThacDuLieuDataResponse;
import com.pmis.services.service.ServiceService;
import com.pmis.util.DataExploitationUtil;
import com.pmis.util.SQLIPreventUtil;
import com.pmis.util.Util;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.*;
import java.util.*;

@Service
public class KhaiThacDuLieuService {
    @Autowired
    private ServiceService serviceService;

    public KhaiThacDuLieuDataResponse exec_APIC_L_1(ExecServiceRequest execServiceRequest) {
        if (execServiceRequest.getParameters() != null) {
            String MA_BANG = "";
            String TEN_BANG = "";
            List<Map<String, Object>> LST_COT = new ArrayList<>();
            List<Map<String, Object>> LST_FILTER = new ArrayList<>();
            int PAGE_NUM = 1;
            int PAGE_ROW_NUM = 1000;
            for (Api_Service_Input obj : execServiceRequest.getParameters()) {
                try {
                    if ("MA_BANG".equals(obj.getName())) {
                        MA_BANG = obj.getValue().toString().replaceAll("[^a-zA-Z0-9-]", "");
                    }
                    if ("TEN_BANG".equals(obj.getName())) {
                        TEN_BANG = obj.getValue().toString().replaceAll("[^a-zA-Z0-9_]", "");
                    }
                    if ("LST_COT_JSON".equals(obj.getName())) {
                        if (obj.getValue() != null) {
                            LST_COT = (List<Map<String, Object>>) obj.getValue();
                        }
                    }
                    if ("LST_FILTER_JSON".equals(obj.getName())) {
                        if (obj.getValue() != null) {
                            LST_FILTER = (List<Map<String, Object>>) obj.getValue();
                        }
                    }
                    if ("PAGE_NUM".equals(obj.getName())) {
                        PAGE_NUM = Integer.parseInt(obj.getValue().toString());
                    }
                    if ("PAGE_ROW_NUM".equals(obj.getName())) {
                        PAGE_ROW_NUM = Integer.parseInt(obj.getValue().toString());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    return new KhaiThacDuLieuDataResponse(-2, "Tham số đầu vào không đúng");
                }
            }

            if (MA_BANG.isEmpty() || LST_COT.isEmpty()) {
                return new KhaiThacDuLieuDataResponse(-2, "Tham số đầu vào không đúng"); // Tham số đầu vào không đúng
            }

            Map<String, Object> connectInfo = serviceService.getConnectInfoByTable(MA_BANG);

            if (connectInfo == null) {
                return new KhaiThacDuLieuDataResponse(-10, "Không có thông tin kết nối"); // Không có thông tin kết nối
            } else {
                try {
                    Connection conn = Util.getConnection(
                            connectInfo.get("IP").toString(),
                            connectInfo.get("PORT").toString(),
                            connectInfo.get("TEN_CSDL").toString(),
                            connectInfo.get("TEN_DANG_NHAP").toString(),
//                            connectInfo.get("MAT_KHAU").toString(),
                            Util.decrypt(connectInfo.get("MAT_KHAU").toString()),
                            "false",
                            "false",
                            "TLSv1.2"
                    );

                    if (conn.isValid(0)) {
                        List<Object> params = KhaiThacDuLieuDataSQLResponse(TEN_BANG, LST_COT, LST_FILTER, PAGE_NUM, PAGE_ROW_NUM);

                        if (params.isEmpty()) {
                            return new KhaiThacDuLieuDataResponse(-2, "Tham số đầu vào không đúng");
                        }

                        if (params.get(0) == null || (params.get(0) != null && params.get(0).toString().replaceAll(" ", "").isEmpty())) {
                            return new KhaiThacDuLieuDataResponse(-2, "Không có thông tin về cột dữ liệu đã khai thác");
                        }

//                        String strResult = "SELECT ?1 FROM ?2 WHERE 1=1 ?3 ORDER BY ?4 OFFSET ?5 ROWS FETCH NEXT ?6 ROWS ONLY";
                        String strResult = "SELECT * FROM (\n" +
                                "SELECT ROW_NUMBER() OVER (ORDER BY ?4 ) stt, ?1 FROM ?2 WHERE 1=1 ?3 \n" +
                                ") t WHERE stt > ?5 and stt <= ?6";
                        String strResultCount = "SELECT COUNT(*) FROM ?1 WHERE 1=1 ?2";

                        PreparedStatement lstData = conn.prepareStatement(
                                strResult
                                        .replace("?1", params.get(0).toString())
                                        .replace("?2", params.get(1).toString())
                                        .replace("?3", params.get(2).toString())
                                        .replace("?4", !params.get(3).toString().isEmpty() ? params.get(3).toString() : "( SELECT 1 )")
                                        .replace("?5", params.get(4).toString())
                                        .replace("?6", params.get(5).toString())
                        );

                        PreparedStatement lstDataCount = conn.prepareStatement(
                                strResultCount
                                        .replace("?1", params.get(1).toString())
                                        .replace("?2", params.get(2).toString())
                        );

                        ResultSet rsDataCount = lstDataCount.executeQuery();
                        ResultSet rsLstData = lstData.executeQuery();

                        rsDataCount.next();
                        Long dataCountResult = rsDataCount.getLong(1);

                        List<HashMap<String, Object>> dataResult = new ArrayList<>();
                        ResultSetMetaData mdLstData = rsLstData.getMetaData();
                        int columns = mdLstData.getColumnCount();
                        HashMap<String, Object> dataRowResult;
                        while (rsLstData.next()) {
                            dataRowResult = new HashMap<>();
                            for (int i = 1; i <= columns; i++) {
                                dataRowResult.put(mdLstData.getColumnName(i), rsLstData.getObject(i));
                            }
                            dataResult.add(dataRowResult);
                        }

                        rsDataCount.close();
                        rsLstData.close();

                        return new KhaiThacDuLieuDataResponse(dataResult, dataCountResult, 1, "Thành công");
                    } else {
                        return new KhaiThacDuLieuDataResponse(-11, "Kết nối không tồn tại");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    return switch (e.getErrorCode()) {
                        case 0 -> new KhaiThacDuLieuDataResponse(-4, "Không kết nối được tới máy chủ");
                        case 18456 -> new KhaiThacDuLieuDataResponse(-5, "Sai tên đăng nhập hoặc mật khẩu");
                        case 4060 -> new KhaiThacDuLieuDataResponse(-6, "Tên cơ sở dữ liệu không tồn tại");
                        default -> new KhaiThacDuLieuDataResponse(0, "Xảy ra lỗi trong quá trình thực hiện");
                    };
                } finally {
                    Util.closeConnection();
                }
            }
        } else {
            return new KhaiThacDuLieuDataResponse(-2, "Tham số đầu vào không đúng"); //Tham số đầu vào không đúng
        }
    }

    private List<Object> KhaiThacDuLieuDataSQLResponse (
            String TEN_BANG,
            List<Map<String, Object>> LST_COT,
            List<Map<String, Object>> LST_FILTER,
            Integer PAGE_NUM,
            Integer PAGE_ROW_NUM
    ) {
        try {
            Collections.sort(LST_COT, new Comparator<Map<String, Object>>() {
                @Override
                public int compare(Map<String, Object> o1, Map<String, Object> o2) {
                    return Integer.parseInt(o1.get("STT").toString()) - Integer.parseInt(o2.get("STT").toString());
                }
            });
            Collections.sort(LST_FILTER, new Comparator<Map<String, Object>>() {
                @Override
                public int compare(Map<String, Object> o1, Map<String, Object> o2) {
                    return Integer.parseInt(o1.get("STT").toString()) - Integer.parseInt(o2.get("STT").toString());
                }
            });

            StringBuilder lstColumnName = new StringBuilder();
            StringBuilder lstColumnSort = new StringBuilder();
            StringBuilder lstColumnFilter = new StringBuilder();

            for (Map<String, Object> obj : LST_COT) {
                lstColumnName.append(SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("TEN_COT").toString())).append(",");
                if (obj.get("SORT") != null && "1".equals(obj.get("SORT").toString())) {
                    lstColumnSort.append(SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("TEN_COT").toString())).append(" asc,");
                }
                if (obj.get("SORT") != null && "0".equals(obj.get("SORT").toString())) {
                    lstColumnSort.append(SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("TEN_COT").toString())).append(" desc,");
                }
            }

            if (!lstColumnName.isEmpty()) {
                lstColumnName = new StringBuilder(lstColumnName.substring(0, lstColumnName.length() - 1));
            }

            if (!lstColumnSort.isEmpty()) {
                lstColumnSort = new StringBuilder(lstColumnSort.substring(0, lstColumnSort.length() - 1));
            }

            Map<String, List<Map<String, Object>>> lstOrFilter = new HashMap<>();
            for (Map<String, Object> obj : LST_FILTER) {
                String maCot = SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("MA_COT").toString());
                if (lstOrFilter.containsKey(maCot)) {
                    lstOrFilter.get(maCot).add(obj);
                } else {
                    List<Map<String, Object>> lstOrFilterTmp = new ArrayList<>();
                    lstOrFilterTmp.add(obj);
                    lstOrFilter.put(maCot, lstOrFilterTmp);
                }
            }

            lstOrFilter.forEach((key, value) -> {
                if (value.size() > 1) {
                    StringBuilder multiOrFilter = new StringBuilder(" AND (");
                    int index = 0;
                    for (Map<String, Object> filter: value) {
                        String maKieuDuLieu = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("MA_KIEU_DLIEU").toString());
                        String loaiDieuKien = SQLIPreventUtil.encodeValueToPreventSQLIFilter(filter.get("LOAI_DKIEN").toString());
                        String tenCot = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("TEN_COT").toString());
                        String giaTriLoc = SQLIPreventUtil.fSQLStandardValue(filter.get("GIA_TRI_LOC").toString());
                        String nhomDieuKien = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("NHOM_DKIEU").toString());

                        String filterByCol = DataExploitationUtil.getFilterByCol(maKieuDuLieu, loaiDieuKien, nhomDieuKien, tenCot, giaTriLoc);
                        if (index == 0) {
                            filterByCol = filterByCol.substring(nhomDieuKien.length() + 1);
                        }
                        multiOrFilter.append(filterByCol);
                        index++;
                    }
                    multiOrFilter.append(") ");
                    lstColumnFilter.append(" ").append(multiOrFilter);
                } else if (value.size() == 1) {
                    Map<String, Object> filter = value.get(0);
                    String maKieuDuLieu = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("MA_KIEU_DLIEU").toString());
                    String loaiDieuKien = SQLIPreventUtil.encodeValueToPreventSQLIFilter(filter.get("LOAI_DKIEN").toString());
                    String tenCot = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("TEN_COT").toString());
                    String giaTriLoc = SQLIPreventUtil.fSQLStandardValue(filter.get("GIA_TRI_LOC").toString());
                    String andFilterString = DataExploitationUtil.getAndFilterString(maKieuDuLieu, loaiDieuKien, tenCot, giaTriLoc);
                    lstColumnFilter.append(" ").append(andFilterString);
                }
            });

            List<Object> params = new ArrayList<>();

            params.add(lstColumnName);
            params.add(TEN_BANG);
            params.add(lstColumnFilter);
            params.add(lstColumnSort);
            params.add((long) PAGE_NUM * PAGE_ROW_NUM);
            params.add((long) (PAGE_NUM + 1) * PAGE_ROW_NUM);

            return params;
        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
    }
}
