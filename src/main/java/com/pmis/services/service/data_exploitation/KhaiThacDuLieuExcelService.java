/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.pmis.services.service.data_exploitation;

import com.pmis.constant.Constant;
import com.pmis.models.model.Api_Service_Input;
import com.pmis.payload.request.ExecServiceRequest;
import com.pmis.payload.response.service.ExecServiceResponse;
import com.pmis.payload.response.service.KhaiThacDuLieuDataExcelResponse;

import java.io.ByteArrayOutputStream;
import java.math.BigDecimal;
import java.sql.*;
import java.util.*;
import java.util.Date;

import com.pmis.services.service.ServiceService;
import com.pmis.util.DataExploitationUtil;
import com.pmis.util.SQLIPreventUtil;
import com.pmis.util.Util;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class KhaiThacDuLieuExcelService {

    @Autowired
    private ServiceService serviceService;

    public KhaiThacDuLieuDataExcelResponse exec_APIC_L_2(ExecServiceRequest execServiceRequest) {
        if (execServiceRequest.getParameters() != null) {
            String MA_BANG = "";
            String TEN_BANG = "";
            List<Map<String, Object>> LST_COT = new ArrayList<>();
            List<Map<String, Object>> LST_FILTER = new ArrayList<>();
            for (Api_Service_Input obj : execServiceRequest.getParameters()) {
                try {
                    if ("MA_BANG".equals(obj.getName())) {
                        MA_BANG = obj.getValue().toString().replaceAll("[^a-zA-Z0-9-]", "");
                    }
                    if ("TEN_BANG".equals(obj.getName())) {
                        TEN_BANG = obj.getValue().toString().replaceAll("[^a-zA-Z0-9_]", "");
                    }
                    if ("LST_COT_JSON".equals(obj.getName())) {
                        if (obj.getValue() != null) {
                            LST_COT = (List<Map<String, Object>>) obj.getValue();
                        }
                    }
                    if ("LST_FILTER_JSON".equals(obj.getName())) {
                        if (obj.getValue() != null) {
                            LST_FILTER = (List<Map<String, Object>>) obj.getValue();
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    return new KhaiThacDuLieuDataExcelResponse(-2, "Tham số đầu vào không đúng");
                }

            }
            if (MA_BANG.isEmpty() || LST_COT.isEmpty()) {
                return new KhaiThacDuLieuDataExcelResponse(-2, "Tham số đầu vào không đúng");//Tham số đầu vào không đúng
            }
            Map<String, Object> connectInfo = serviceService.getConnectInfoByTable(MA_BANG);
            if (connectInfo == null) {
                return new KhaiThacDuLieuDataExcelResponse(-10, "Không có thông tin kết nối");//Không có thông tin kết nối
            } else {
                try {
                    Connection conn = Util.getConnection(
                            connectInfo.get("IP").toString(),
                            connectInfo.get("PORT").toString(),
                            connectInfo.get("TEN_CSDL").toString(),
                            connectInfo.get("TEN_DANG_NHAP").toString(),
//                            connectInfo.get("MAT_KHAU").toString(),
                            Util.decrypt(connectInfo.get("MAT_KHAU").toString()),
                            "false",
                            "false",
                            "TLSv1.2"
                            );
                    if (conn.isValid(0)) {
                        List<Object> params = KhaiThacDuLieuDataSQLExcelResponse(TEN_BANG, LST_COT, LST_FILTER);

                        if (params.isEmpty()) {
                            return new KhaiThacDuLieuDataExcelResponse(-2, "Tham số đầu vào không đúng");
                        }

                        if (params.get(0) == null || (params.get(0) != null && params.get(0).toString().replaceAll(" ", "").isEmpty())) {
                            return null;
                        }

                        String strResultCount = "SELECT COUNT(*) FROM @2 WHERE 1=1 @3";
                        PreparedStatement lstDataCount = conn.prepareStatement(
                                strResultCount
                                        .replace("@2", params.get(1).toString())
                                        .replace("@3", params.get(2).toString())
                        );
                        ResultSet rsDataCount = lstDataCount.executeQuery();
                        rsDataCount.next();
                        long dataCountResult = rsDataCount.getLong(1);
                        if (dataCountResult >= Constant.MAX_EXCEL_ROWS) {
                            return new KhaiThacDuLieuDataExcelResponse(-12, "Số lượng bản ghi dữ liệu quá lớn, hệ thống không thể xuất excel.");
                        }

                        String strResult = "SELECT @1 FROM @2 WHERE 1=1 @3 ORDER BY @4 ";
                        PreparedStatement lstData = conn.prepareStatement(
                                strResult
                                        .replace("@1", params.get(0).toString())
                                        .replace("@2", params.get(1).toString())
                                        .replace("@3", params.get(2).toString())
                                        .replace("@4", !params.get(3).toString().isEmpty() ? params.get(3).toString() : "1")
                        );

                        rsDataCount.close();

                        //Xuất excel                        
                        return new KhaiThacDuLieuDataExcelResponse(ResultSetToExcel(lstData.executeQuery(), TEN_BANG, LST_COT), TEN_BANG + (new Date()).getTime() + ".xlsx", 1, "Thành công");
                    } else {
                        return new KhaiThacDuLieuDataExcelResponse(-11, "Kết nối không tồn tại");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    return switch (e.getErrorCode()) {
                        case 0 -> new KhaiThacDuLieuDataExcelResponse(-4, "Không kết nối được tới máy chủ");
                        case 18456 -> new KhaiThacDuLieuDataExcelResponse(-5, "Sai tên đăng nhập hoặc mật khẩu");
                        case 4060 -> new KhaiThacDuLieuDataExcelResponse(-6, "Tên cơ sở dữ liệu không tồn tại");
                        default -> new KhaiThacDuLieuDataExcelResponse(0, "Xảy ra lỗi trong quá trình thực hiện");
                    };
                } finally {
                    Util.closeConnection();
                }
            }
        } else {
            return new KhaiThacDuLieuDataExcelResponse(-2, "Tham số đầu vào không đúng");//Tham số đầu vào không đúng
        }
    }

    private void createCell(Row row, int columnCount, Object value, CellStyle styleInt, CellStyle styleDouble, CellStyle styleDate, CellStyle styleDateTime, XSSFSheet sheet) {

        Cell cell = row.createCell(columnCount);
        if (value instanceof Integer) {
            cell.setCellStyle(styleInt);
            cell.setCellValue((Integer) value);
        } else if (value instanceof Boolean) {
            cell.setCellValue((Boolean) value);
        } else if (value instanceof Timestamp) {
            cell.setCellStyle(styleDateTime);
            cell.setCellValue(((Timestamp) value));
        } else if (value instanceof java.sql.Date) {
            cell.setCellStyle(styleDate);
            cell.setCellValue(((java.sql.Date) value));
        } else if (value instanceof BigDecimal) {
            cell.setCellStyle(styleDouble);
            cell.setCellValue(((BigDecimal) value).doubleValue());
        } else if (value instanceof Double) {
            cell.setCellStyle(styleDouble);
            cell.setCellValue(((Double) value));
        } else {
            cell.setCellValue((String) value);
        }

    }

    private void createCellHeader(Row row, int columnCount, String value, CellStyle style, XSSFSheet sheet) {

        Cell cell = row.createCell(columnCount);
        cell.setCellStyle(style);
        cell.setCellValue((String) value);

    }

    private String getColDescByColName(String colName, List<Map<String, Object>> LST_COT) {
        String strValue = colName;
        for (int i = 0; i <= LST_COT.size() - 1; i++) {
            if (LST_COT.get(i).get("TEN_COT").toString().equals(colName)) {
                strValue = LST_COT.get(i).get("MO_TA").toString();
                break;
            }
        }
        return strValue;
    }

    public Object ResultSetToExcel(ResultSet rsLstData, String tableName, List<Map<String, Object>> LST_COT) {
        try {
            ResultSetMetaData mdLstData = rsLstData.getMetaData();
            int columns = mdLstData.getColumnCount();
            HashMap dataRowResult = new HashMap();
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet sheet;
            sheet = workbook.createSheet(tableName);
            Row row = sheet.createRow(0);
            CellStyle styleHeader = workbook.createCellStyle();
            CellStyle styleInt = workbook.createCellStyle();
            CellStyle styleDouble = workbook.createCellStyle();
            CellStyle styleDate = workbook.createCellStyle();
            CellStyle styleDateTime = workbook.createCellStyle();
            XSSFFont font = workbook.createFont();
            font.setBold(true);
            font.setFontHeight(12);
            styleHeader.setFont(font);
            styleHeader.setAlignment(HorizontalAlignment.CENTER);

            XSSFFont fontContent = workbook.createFont();
            fontContent.setBold(false);
            fontContent.setFontHeight(12);

            styleInt.setFont(fontContent);
            styleDouble.setFont(fontContent);
            styleDate.setFont(fontContent);
            styleDateTime.setFont(fontContent);
            CreationHelper createHelper = workbook.getCreationHelper();
            styleInt.setDataFormat(
                    createHelper.createDataFormat().getFormat("#,##0"));
            styleDouble.setDataFormat(
                    createHelper.createDataFormat().getFormat("#,##0.00"));
            styleDate.setDataFormat(
                    createHelper.createDataFormat().getFormat("d/m/yyyy"));

            styleDateTime.setDataFormat(
                    createHelper.createDataFormat().getFormat("d/m/yyyy h:mm:ss"));

            for (int i = 1; i <= columns; i++) {
                createCellHeader(row, i - 1, getColDescByColName(mdLstData.getColumnName(i), LST_COT), styleHeader, sheet);
                //dataRowResult.put(mdLstData.getColumnName(i), rsLstData.getObject(i));
            }
            CellStyle styleContent = workbook.createCellStyle();

            int iRowCount = 0;
            Row rowContent = sheet.createRow(1);
            while (rsLstData.next()) {
                iRowCount++;
                rowContent = sheet.createRow(iRowCount);
                for (int i = 1; i <= columns; i++) {
                    createCell(rowContent, i - 1, rsLstData.getObject(i), styleInt, styleDouble, styleDate, styleDateTime, sheet);
                }

            }
            for (int i = 0; i <= columns - 1; i++) {
                sheet.autoSizeColumn(i);
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            workbook.write(baos);

            rsLstData.close();
            return Base64.getEncoder().encodeToString(baos.toByteArray());

        } catch (Exception e) {
            e.printStackTrace();
            String t = "";
        } finally {
            Util.closeConnection();
        }
        return null;
    }

    private List<Object> KhaiThacDuLieuDataSQLExcelResponse(String TEN_BANG,
                                                            List<Map<String, Object>> LST_COT,
                                                            List<Map<String, Object>> LST_FILTER) {

        try {
            Collections.sort(LST_COT, new Comparator<Map<String, Object>>() {
                @Override
                public int compare(Map<String, Object> o1, Map<String, Object> o2) {
                    return Integer.parseInt(o1.get("STT").toString()) - Integer.parseInt(o2.get("STT").toString());
                }
            });
            Collections.sort(LST_FILTER, new Comparator<Map<String, Object>>() {
                @Override
                public int compare(Map<String, Object> o1, Map<String, Object> o2) {
                    return Integer.parseInt(o1.get("STT").toString()) - Integer.parseInt(o2.get("STT").toString());
                }
            });
            StringBuilder lstColumnName = new StringBuilder();
            StringBuilder lstColumnSort = new StringBuilder();
            StringBuilder lstColumnFilter = new StringBuilder();

            for (Map<String, Object> obj : LST_COT) {
                lstColumnName.append(SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("TEN_COT").toString())).append(",");
                if (obj.get("SORT") != null && "1".equals(obj.get("SORT").toString())) {
                    lstColumnSort.append(SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("TEN_COT").toString())).append(" asc,");
                }
                if (obj.get("SORT") != null && "0".equals(obj.get("SORT").toString())) {
                    lstColumnSort.append(SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("TEN_COT").toString())).append(" desc,");
                }
            }

            if (!lstColumnName.isEmpty()) {
                lstColumnName = new StringBuilder(lstColumnName.substring(0, lstColumnName.length() - 1));
            }

            if (!lstColumnSort.isEmpty()) {
                lstColumnSort = new StringBuilder(lstColumnSort.substring(0, lstColumnSort.length() - 1));
            }

            Map<String, List<Map<String, Object>>> lstOrFilter = new HashMap<>();
            for (Map<String, Object> obj : LST_FILTER) {
                String maCot = SQLIPreventUtil.encodeValueToPreventSQLI(obj.get("MA_COT").toString());
                if (lstOrFilter.containsKey(maCot)) {
                    lstOrFilter.get(maCot).add(obj);
                } else {
                    List<Map<String, Object>> lstOrFilterTmp = new ArrayList<>();
                    lstOrFilterTmp.add(obj);
                    lstOrFilter.put(maCot, lstOrFilterTmp);
                }
            }

            lstOrFilter.forEach((key, value) -> {
                if (value.size() > 1) {
                    StringBuilder multiOrFilter = new StringBuilder(" AND (");
                    int index = 0;
                    for (Map<String, Object> filter: value) {
                        String maKieuDuLieu = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("MA_KIEU_DLIEU").toString());
                        String loaiDieuKien = SQLIPreventUtil.encodeValueToPreventSQLIFilter(filter.get("LOAI_DKIEN").toString());
                        String tenCot = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("TEN_COT").toString());
                        String giaTriLoc = SQLIPreventUtil.fSQLStandardValue(filter.get("GIA_TRI_LOC").toString());
                        String nhomDieuKien = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("NHOM_DKIEU").toString());

                        String filterByCol = DataExploitationUtil.getFilterByCol(maKieuDuLieu, loaiDieuKien, nhomDieuKien, tenCot, giaTriLoc);
                        if (index == 0) {
                            filterByCol = filterByCol.substring(nhomDieuKien.length() + 1);
                        }
                        multiOrFilter.append(filterByCol);
                        index++;
                    }
                    multiOrFilter.append(") ");
                    lstColumnFilter.append(" ").append(multiOrFilter);
                } else if (value.size() == 1) {
                    Map<String, Object> filter = value.get(0);
                    String maKieuDuLieu = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("MA_KIEU_DLIEU").toString());
                    String loaiDieuKien = SQLIPreventUtil.encodeValueToPreventSQLIFilter(filter.get("LOAI_DKIEN").toString());
                    String tenCot = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("TEN_COT").toString());
                    String giaTriLoc = SQLIPreventUtil.encodeValueToPreventSQLI(filter.get("GIA_TRI_LOC").toString());
                    String andFilterString = DataExploitationUtil.getAndFilterString(maKieuDuLieu, loaiDieuKien, tenCot, giaTriLoc);
                    lstColumnFilter.append(" ").append(andFilterString);
                }
            });

            List<Object> params = new ArrayList<>();

            params.add(lstColumnName);
            params.add(TEN_BANG);
            params.add(lstColumnFilter);
            params.add(lstColumnSort);

            return params;
        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
    }
}
