package com.pmis.services.service;

import com.pmis.constant.Constant;
import com.pmis.models.comparator.CotDuLieuComparator;
import com.pmis.models.comparator.DieuKienLocComparator;
import com.pmis.models.mapper.CotDuLieuMapper;
import com.pmis.models.mapper.DieuKienLocMapper;
import com.pmis.models.model.data_exploitation.CotDuLieu;
import com.pmis.models.model.data_exploitation.DieuKienLoc;
import com.pmis.payload.response.service.KhaiThacDuLieuDataExcelResponse;
import com.pmis.util.DataExploitationUtil;
import com.pmis.util.SQLIPreventUtil;
import com.pmis.util.Util;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.*;

@Service
public class DataExploitationService {
    @Autowired
    private NamedParameterJdbcTemplate jdbcTemplate;
    private List<CotDuLieu> cotDuLieus;
    private String tableName;
    private String tableId;
    private long rowsNum;

    public DataExploitationService() {
        cotDuLieus = new ArrayList<>();
    }

    public List<Map<String, Object>> getDataExploitation(String maDuLieu, boolean checkSize, boolean excelCheckSize) {
        Map<String, Object> params = new HashMap<>();
        params.put("maDuLieu", maDuLieu);

        if (!existsByMaDuLieu(params)) {
            return null;
        }
        Map<String, Object> tableInfo = getTableName(params);
        if (tableInfo != null && tableInfo.get("TEN_BANG") == null) {
            return null;
        }
        tableName = tableInfo.get("TEN_BANG").toString();
        tableId = tableInfo.get("MA_BANG").toString();

        List<DieuKienLoc> dieuKienLocs = getDieuKienLoc(params);
        if (dieuKienLocs == null) {
            return null;
        }

        params.put("maBang", tableId);
        getCotDuLieu(params);

        if (cotDuLieus == null) {
            return null;
        }

        Map<String, Object> connectInfo = getConnectInfoByTable(tableId);
        if (connectInfo == null) {
            return null;
        }
        try {
            Connection conn = Util.getConnection(
                    connectInfo.get("IP").toString(),
                    connectInfo.get("PORT").toString(),
                    connectInfo.get("TEN_CSDL").toString(),
                    connectInfo.get("TEN_DANG_NHAP").toString(),
//                            connectInfo.get("MAT_KHAU").toString(),
                    Util.decrypt(connectInfo.get("MAT_KHAU").toString()),
                    "false",
                    "false",
                    "TLSv1.2"
            );
            if (!conn.isValid(0)) {
                return null;
            }

            List<String> queryParams = getQueryParams(dieuKienLocs);
            if (queryParams.get(0) == null || (queryParams.get(0) != null && queryParams.get(0).replaceAll(" ", "").isEmpty())) {
                return null;
            }

            if (checkSize) {
                String strResultCount = "SELECT COUNT(*) FROM @2 WHERE 1=1 @3";
                PreparedStatement lstDataCount = conn.prepareStatement(
                        strResultCount
                                .replace("@2", tableName)
                                .replace("@3", queryParams.get(1))
                );
                ResultSet rsDataCount = lstDataCount.executeQuery();
                rsDataCount.next();
                rowsNum = rsDataCount.getLong(1);
                if (rowsNum >= Constant.MAX_CHART_DATA_ROWS) {
                    return null;
                }
                if (excelCheckSize && rowsNum >= Constant.MAX_EXCEL_ROWS) {
                    return null;
                }
            }

            String strResult = "SELECT ?1 FROM ?2 WHERE 1=1 ?3 ORDER BY ?4 ";
            PreparedStatement lstData = conn.prepareStatement(
                    strResult
                            .replace("?1", queryParams.get(0))
                            .replace("?2", tableName)
                            .replace("?3", queryParams.get(1))
                            .replace("?4", queryParams.get(2).isEmpty() ? "1" : queryParams.get(2))
            );

            ResultSet dataResultSet = lstData.executeQuery();

            List<Map<String, Object>> dataResult = new ArrayList<>();
            ResultSetMetaData mdLstData = dataResultSet.getMetaData();
            int columns = mdLstData.getColumnCount();
            Map<String, Object> dataRowResult;

            while (dataResultSet.next()) {
                dataRowResult = new HashMap<>();
                for (int i = 1; i <= columns; i++) {
                    dataRowResult.put(mdLstData.getColumnName(i), dataResultSet.getObject(i));
                }
                dataResult.add(dataRowResult);
            }

            dataResultSet.close();

            return dataResult;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            Util.closeConnection();
        }
    }

    public ResultSet getDataResultSet(String maDuLieu) {
        Map<String, Object> params = new HashMap<>();
        params.put("maDuLieu", maDuLieu);

        if (!existsByMaDuLieu(params)) {
            return null;
        }
        Map<String, Object> tableInfo = getTableName(params);
        if (tableInfo != null && tableInfo.get("TEN_BANG") == null) {
            return null;
        }
        tableName = tableInfo.get("TEN_BANG").toString();
        tableId = tableInfo.get("MA_BANG").toString();

        List<DieuKienLoc> dieuKienLocs = getDieuKienLoc(params);
        if (dieuKienLocs == null) {
            return null;
        }

        params.put("maBang", tableId);
        getCotDuLieu(params);

        if (cotDuLieus == null) {
            return null;
        }

        Map<String, Object> connectInfo = getConnectInfoByTable(tableId);
        if (connectInfo == null) {
            return null;
        }
        try {
            Connection conn = Util.getConnection(
                    connectInfo.get("IP").toString(),
                    connectInfo.get("PORT").toString(),
                    connectInfo.get("TEN_CSDL").toString(),
                    connectInfo.get("TEN_DANG_NHAP").toString(),
//                            connectInfo.get("MAT_KHAU").toString(),
                    Util.decrypt(connectInfo.get("MAT_KHAU").toString()),
                    "false",
                    "false",
                    "TLSv1.2"
            );
            if (!conn.isValid(0)) {
                return null;
            }

            List<String> queryParams = getQueryParams(dieuKienLocs);
            if (queryParams.get(0) == null || (queryParams.get(0) != null && queryParams.get(0).replaceAll(" ", "").isEmpty())) {
                return null;
            }

            String strResult = "SELECT ?1 FROM ?2 WHERE 1=1 ?3 ORDER BY ?4 ";
            PreparedStatement lstData = conn.prepareStatement(
                    strResult
                            .replace("?1", queryParams.get(0))
                            .replace("?2", tableName)
                            .replace("?3", queryParams.get(1))
                            .replace("?4", queryParams.get(2).isEmpty() ? "1" : queryParams.get(2))
            );

            return lstData.executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private Map<String, Object> getConnectInfoByTable(String MA_BANG) {
        String queryString = "SELECT * FROM BCTM_CAU_HINH_KET_NOI\n"
                + "WHERE MA_KETNOI IN (select MA_KETNOI from BCTM_BANG_DULIEU WHERE MA_BANG = :MA_BANG )";
        try {
            MapSqlParameterSource parameters = new MapSqlParameterSource().addValue("MA_BANG", MA_BANG);
            return jdbcTemplate.queryForMap(queryString, parameters);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private boolean existsByMaDuLieu(Map<String, Object> params) {
        try {
            String sql = "SELECT COUNT(*) cnt FROM BCTM_MAU_DULIEU WHERE MA_DULIEU = :maDuLieu";
            Map<String, Object> resultSet = jdbcTemplate.queryForMap(sql, params);
            return (Integer) resultSet.get("cnt") != 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private Map<String, Object> getTableName(Map<String, Object> params) {
        try {
            String sql = "SELECT A.MA_BANG, B.TEN_BANG FROM BCTM_MAU_DULIEU A LEFT JOIN BCTM_BANG_DULIEU B ON (A.MA_BANG=B.MA_BANG) WHERE A.MA_DULIEU= :maDuLieu";
            return jdbcTemplate.queryForMap(sql, params);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private void getCotDuLieu(Map<String, Object> params) {
        try {
            String sql = "exec API_SELECT_BCTM_MAU_CTIET_DULIEU @MA_DULIEU = :maDuLieu , @MA_BANG = :maBang";
            List<CotDuLieu> lst = jdbcTemplate.query(sql, params, new CotDuLieuMapper());
            setCotDuLieus(lst.stream().filter(e -> e.getVIEW() == 1).toList());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private List<DieuKienLoc> getDieuKienLoc(Map<String, Object> params) {
        try {
            String sql = "SELECT A.*,B.TEN_COT,B.MA_KIEU_DLIEU from BCTM_MAU_CTIET_LOC_DULIEU A LEFT JOIN BCTM_COT_DULIEU B ON (A.MA_COT=B.MA_COT) WHERE MA_DULIEU= :maDuLieu ORDER BY STT";
            return jdbcTemplate.query(sql, params, new DieuKienLocMapper());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private List<String> getQueryParams(List<DieuKienLoc> dieuKienLocs) {
//        cotDuLieus.sort(new CotDuLieuComparator());
        dieuKienLocs.sort(new DieuKienLocComparator());

        StringBuilder lstColumnName = new StringBuilder();
        StringBuilder lstColumnSort = new StringBuilder();
        StringBuilder lstColumnFilter = new StringBuilder();

        for (CotDuLieu cotDuLieu: cotDuLieus) {
            if (cotDuLieu.getVIEW() == 1) {
                lstColumnName.append(cotDuLieu.getTEN_COT()).append(",");
            }
            if (cotDuLieu.getSORT() != null) {
                lstColumnSort.append(cotDuLieu.getTEN_COT());
                if (cotDuLieu.getSORT().equals("1")) {
                    lstColumnSort.append(" asc,");
                } else {
                    lstColumnSort.append(" desc,");
                }
            }
        }

        if (!lstColumnName.isEmpty()) {
            lstColumnName = new StringBuilder(lstColumnName.substring(0, lstColumnName.length() - 1));
        }

        if (!lstColumnSort.isEmpty()) {
            lstColumnSort = new StringBuilder(lstColumnSort.substring(0, lstColumnSort.length() - 1));
        }

//        String columnFilter;
//        for (DieuKienLoc dieuKienLoc: dieuKienLocs) {
//            columnFilter = "";
//            String maKieuDuLieu = dieuKienLoc.getMA_KIEU_DLIEU();
//            String loaiDieuKien = dieuKienLoc.getLOAI_DKIEN();
//            String nhomDieuKien = dieuKienLoc.getNHOM_DKIEU();
//            String tenCot = dieuKienLoc.getTEN_COT();
//            String giaTriLoc = dieuKienLoc.getGIA_TRI_LOC();
//
//            switch (maKieuDuLieu) {
//                case "KDL-1":
//                    columnFilter = switch (loaiDieuKien) {
//                        case "%V%" -> nhomDieuKien + " " + tenCot + " LIKE N'%" + giaTriLoc + "%'";
//                        case "V%" -> nhomDieuKien + " " + tenCot + " LIKE N'" + giaTriLoc + "%'";
//                        case "%V" -> nhomDieuKien + " " + tenCot + " LIKE N'%" + giaTriLoc + "'";
//                        default -> nhomDieuKien + " " + tenCot + " " + loaiDieuKien + " N'" + giaTriLoc + "'";
//                    };
//                    break;
//                case "KDL-2":
//                    columnFilter = nhomDieuKien + " " + tenCot + " " + loaiDieuKien + " " + giaTriLoc;
//                    break;
//                case "KDL-3":
////                        columnFilter = nhomDieuKien + " " + tenCot + " " + loaiDieuKien + " " + " TRY_PARSE('" + convertDateString(giaTriLoc) + "' AS DATE)";
//                    columnFilter = nhomDieuKien + " " + tenCot + " " + loaiDieuKien + " " + " '" + Util.convertDateString(giaTriLoc) + "' ";
//                    break;
//                case "KDL-4":
////                        columnFilter = nhomDieuKien + " " + tenCot + " " + loaiDieuKien + " ( SELECT DATEADD(HOUR, 7, TRY_PARSE('" + convertDateString(giaTriLoc) + "' AS DATETIME)) )";
//                    columnFilter = nhomDieuKien + " " + tenCot + " " + loaiDieuKien + " '" + Util.convertDateTimeString(giaTriLoc) + "' ";
//                    break;
//                default:
//            }
//            if (!columnFilter.isEmpty()) {
//                lstColumnFilter.append(" ").append(columnFilter);
//            }
//        }

        Map<String, List<DieuKienLoc>> lstOrFilter = new HashMap<>();
        for (DieuKienLoc dieuKienLoc: dieuKienLocs) {
            String maCot = SQLIPreventUtil.encodeValueToPreventSQLI(dieuKienLoc.getMA_COT());
            if (lstOrFilter.containsKey(maCot)) {
                lstOrFilter.get(maCot).add(dieuKienLoc);
            } else {
                List<DieuKienLoc> lstOrFilterTmp = new ArrayList<>();
                lstOrFilterTmp.add(dieuKienLoc);
                lstOrFilter.put(maCot, lstOrFilterTmp);
            }
        }

        lstOrFilter.forEach((key, value) -> {
            if (value.size() > 1) {
                StringBuilder multiOrFilter = new StringBuilder(" AND (");
                int index = 0;
                for (DieuKienLoc filter: value) {
                    String maKieuDuLieu = filter.getMA_KIEU_DLIEU();
                    String loaiDieuKien = filter.getLOAI_DKIEN();
                    String tenCot = filter.getTEN_COT();
                    String giaTriLoc = filter.getGIA_TRI_LOC();
                    String nhomDieuKien = filter.getNHOM_DKIEU();

                    String orFilterByCol = DataExploitationUtil.getFilterByCol(maKieuDuLieu, loaiDieuKien, nhomDieuKien, tenCot, giaTriLoc);
                    if (index == 0) {
                        orFilterByCol = orFilterByCol.substring(nhomDieuKien.length() + 1);
                    }
                    multiOrFilter.append(orFilterByCol);
                    index++;
                }
                multiOrFilter.append(") ");
                lstColumnFilter.append(" ").append(multiOrFilter);
            } else if (value.size() == 1) {
                DieuKienLoc filter = value.get(0);
                String maKieuDuLieu = SQLIPreventUtil.encodeValueToPreventSQLI(filter.getMA_KIEU_DLIEU());
                String loaiDieuKien = SQLIPreventUtil.encodeValueToPreventSQLIFilter(filter.getLOAI_DKIEN());
                String tenCot = SQLIPreventUtil.encodeValueToPreventSQLI(filter.getTEN_COT());
                String giaTriLoc = SQLIPreventUtil.fSQLStandardValue(filter.getGIA_TRI_LOC());
                String andFilterString = DataExploitationUtil.getAndFilterString(maKieuDuLieu, loaiDieuKien, tenCot, giaTriLoc);
                lstColumnFilter.append(" ").append(andFilterString);
            }
        });

        List<String> params = new ArrayList<>();
        params.add(lstColumnName.toString());
        params.add(lstColumnFilter.toString());
        params.add(lstColumnSort.toString());

        return params;
    }

    public List<CotDuLieu> getCotDuLieus() {
        return cotDuLieus;
    }

    public void setCotDuLieus(List<CotDuLieu> cotDuLieus) {
        this.cotDuLieus = cotDuLieus;
    }

    public String getTableName() {
        return tableName;
    }

    public long getRowsNum() {
        return rowsNum;
    }

    public String getTableId() {
        return tableId;
    }
}
